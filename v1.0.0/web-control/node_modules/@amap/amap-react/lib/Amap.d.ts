import React from 'react';
import { EventHandler } from './hooks/events';
export declare const AmapContext: React.Context<AMap.Map_2 | undefined>;
declare type MapEventHandler<E = any> = EventHandler<AMap.Map, E>;
export declare type ViewMode = '2D' | '3D';
export declare type MapFeature = 'bg' | 'road' | 'building' | 'point';
export declare type MapProps = React.PropsWithChildren<{
    center?: Vector2;
    zoom?: number;
    rotation?: number;
    pitch?: number;
    viewMode?: ViewMode;
    features?: MapFeature[];
    zooms?: number[] | [number, number];
    dragEnable?: boolean;
    zoomEnable?: boolean;
    jogEnable?: boolean;
    pitchEnable?: boolean;
    rotateEnable?: boolean;
    animateEnable?: boolean;
    keyboardEnable?: boolean;
    doubleClickZoom?: boolean;
    scrollWheel?: boolean;
    touchZoom?: boolean;
    touchZoomCenter?: boolean;
    showLabel?: boolean;
    defaultCursor?: string;
    isHotspot?: boolean;
    mapStyle?: string;
    wallColor?: string | number[];
    roofColor?: string | number[];
    showBuildingBlock?: boolean;
    showIndoorMap?: boolean;
    skyColor?: string | number[];
    labelRejectMask?: boolean;
    mask?: Vector2[] | Vector2[][] | Vector2[][];
    extraOptions?: any;
    onResize?: MapEventHandler;
    onComplete?: MapEventHandler;
    onClick?: MapEventHandler;
    onDblClick?: MapEventHandler;
    onMapMove?: MapEventHandler;
    onHotspotClick?: MapEventHandler;
    onHotspotOver?: MapEventHandler;
    onHotspotOut?: MapEventHandler;
    onMoveStart?: MapEventHandler;
    onMoveEnd?: MapEventHandler;
    onZoomChange?: MapEventHandler;
    onZoomStart?: MapEventHandler;
    onZoomEnd?: MapEventHandler;
    onMouseMove?: MapEventHandler;
    onMouseWheel?: MapEventHandler;
    onMouseOver?: MapEventHandler;
    onMouseOut?: MapEventHandler;
    onMouseUp?: MapEventHandler;
    onMouseDown?: MapEventHandler;
    onRightClick?: MapEventHandler;
    onDragStart?: MapEventHandler;
    onDragging?: MapEventHandler;
    onDragEnd?: MapEventHandler;
    onTouchStart?: MapEventHandler;
    onTouchMove?: MapEventHandler;
    onTouchEnd?: MapEventHandler;
}>;
declare const Amap: React.ForwardRefExoticComponent<{
    center?: number[] | [number, number] | undefined;
    zoom?: number | undefined;
    rotation?: number | undefined;
    pitch?: number | undefined;
    viewMode?: "2D" | "3D" | undefined;
    features?: MapFeature[] | undefined;
    zooms?: number[] | [number, number] | undefined;
    dragEnable?: boolean | undefined;
    zoomEnable?: boolean | undefined;
    jogEnable?: boolean | undefined;
    pitchEnable?: boolean | undefined;
    rotateEnable?: boolean | undefined;
    animateEnable?: boolean | undefined;
    keyboardEnable?: boolean | undefined;
    doubleClickZoom?: boolean | undefined;
    scrollWheel?: boolean | undefined;
    touchZoom?: boolean | undefined;
    touchZoomCenter?: boolean | undefined;
    showLabel?: boolean | undefined;
    defaultCursor?: string | undefined;
    isHotspot?: boolean | undefined;
    mapStyle?: string | undefined;
    wallColor?: string | number[] | undefined;
    roofColor?: string | number[] | undefined;
    showBuildingBlock?: boolean | undefined;
    showIndoorMap?: boolean | undefined;
    skyColor?: string | number[] | undefined;
    labelRejectMask?: boolean | undefined;
    mask?: Vector2[] | Vector2[][] | undefined;
    extraOptions?: any;
    onResize?: EventHandler<AMap.Map_2, any> | undefined;
    onComplete?: EventHandler<AMap.Map_2, any> | undefined;
    onClick?: EventHandler<AMap.Map_2, any> | undefined;
    onDblClick?: EventHandler<AMap.Map_2, any> | undefined;
    onMapMove?: EventHandler<AMap.Map_2, any> | undefined;
    onHotspotClick?: EventHandler<AMap.Map_2, any> | undefined;
    onHotspotOver?: EventHandler<AMap.Map_2, any> | undefined;
    onHotspotOut?: EventHandler<AMap.Map_2, any> | undefined;
    onMoveStart?: EventHandler<AMap.Map_2, any> | undefined;
    onMoveEnd?: EventHandler<AMap.Map_2, any> | undefined;
    onZoomChange?: EventHandler<AMap.Map_2, any> | undefined;
    onZoomStart?: EventHandler<AMap.Map_2, any> | undefined;
    onZoomEnd?: EventHandler<AMap.Map_2, any> | undefined;
    onMouseMove?: EventHandler<AMap.Map_2, any> | undefined;
    onMouseWheel?: EventHandler<AMap.Map_2, any> | undefined;
    onMouseOver?: EventHandler<AMap.Map_2, any> | undefined;
    onMouseOut?: EventHandler<AMap.Map_2, any> | undefined;
    onMouseUp?: EventHandler<AMap.Map_2, any> | undefined;
    onMouseDown?: EventHandler<AMap.Map_2, any> | undefined;
    onRightClick?: EventHandler<AMap.Map_2, any> | undefined;
    onDragStart?: EventHandler<AMap.Map_2, any> | undefined;
    onDragging?: EventHandler<AMap.Map_2, any> | undefined;
    onDragEnd?: EventHandler<AMap.Map_2, any> | undefined;
    onTouchStart?: EventHandler<AMap.Map_2, any> | undefined;
    onTouchMove?: EventHandler<AMap.Map_2, any> | undefined;
    onTouchEnd?: EventHandler<AMap.Map_2, any> | undefined;
} & {
    children?: React.ReactNode;
} & React.RefAttributes<AMap.Map_2 | undefined>>;
declare type AmapModule = typeof Amap & {
    AmapContext: typeof AmapContext;
};
declare const AmapExport: AmapModule;
export default AmapExport;
