/// <reference types="react" />
import { EventTarget } from '../events';
import { BaseProps } from '../common/base';
export declare type EditorProps<C> = React.PropsWithChildren<BaseProps<C> & {
    enabled: boolean;
    onChange?(target: C): void;
    opts?: any;
}>;
export declare type Editor = EventTarget & {
    open(): void;
    close(): void;
    destroy(): void;
};
declare type EditorDef<E extends Editor, C> = {
    plugins: string | string[];
    events: string[];
    init: (target: C) => E;
};
export default function useEditor<E extends Editor, C>(def: EditorDef<E, C>, props: EditorProps<C>): [E | undefined, React.FunctionComponent<EditorProps<C>>];
export {};
